<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>IP Address Tracker & Load Test Simulation</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin-top: 50px;
    }
    button {
      font-size: 18px;
      padding: 10px 20px;
      cursor: pointer;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
    }
    button:hover {
      background-color: #45a049;
    }
    .status {
      margin-top: 20px;
      font-size: 16px;
      color: #333;
    }
    .status.success {
      color: green;
    }
    .status.fail {
      color: red;
    }
    .section {
      margin: 30px 0;
    }
    #ip-address {
      font-size: 20px;
      font-weight: bold;
    }
    .ip-input {
      font-size: 18px;
      padding: 10px;
      margin-top: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 250px;
    }
    .counter {
      margin-top: 10px;
      font-size: 18px;
      font-weight: bold;
    }
    a {
      text-decoration: none;
      font-size: 18px;
      color: #4CAF50;
    }
    a:hover {
      color: #45a049;
    }
    #cat-image {
      margin-top: 20px;
      width: 300px;
    }
    .click-history {
      margin-top: 20px;
      font-size: 16px;
      list-style-type: none;
      padding: 0;
    }
    .click-history li {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>IP Address Tracker & Load Test Simulation</h1>

  <!-- Public IP Section -->
  <div class="section">
    <h2>Public IP Address</h2>
    <p>Your public IP address will be displayed below:</p>
    <div id="ip-address" style="font-size: 20px; font-weight: bold;"></div>
    <script>
      async function fetchIPAddress() {
        try {
          const response = await fetch("https://api.ipify.org?format=json");
          const data = await response.json();
          document.getElementById("ip-address").innerText = `Your Public IP Address: ${data.ip}`;
          console.log("Public IP Address:", data.ip);
        } catch (error) {
          console.error("Error fetching IP address:", error);
          document.getElementById("ip-address").innerText = "Error fetching IP address.";
        }
      }
      fetchIPAddress();
    </script>
  </div>

  <!-- Private IP Section -->
  <div class="section">
    <h2>Private IP Address</h2>
    <p>Your private IP address will be displayed below:</p>
    <div id="private-ip" style="font-size: 20px; font-weight: bold;"></div>
    <script>
      async function getPrivateIP() {
        const ipDisplay = document.getElementById("private-ip");
        ipDisplay.innerText = "Fetching your private IP...";

        try {
          const rtcConnection = new RTCPeerConnection();
          rtcConnection.createDataChannel("");

          rtcConnection.createOffer().then((offer) => rtcConnection.setLocalDescription(offer));

          rtcConnection.onicecandidate = (event) => {
            if (event && event.candidate && event.candidate.candidate) {
              const candidate = event.candidate.candidate;
              const ipRegex = /(?:\d{1,3}\.){3}\d{1,3}/;
              const ip = candidate.match(ipRegex);
              if (ip) {
                ipDisplay.innerText = `Your Private IP Address: ${ip[0]}`;
                rtcConnection.close();
              }
            }
          };
        } catch (error) {
          console.error("Error fetching private IP address:", error);
          ipDisplay.innerText = "Unable to fetch private IP address.";
        }
      }
      getPrivateIP();
    </script>
  </div>

  <!-- Section to fetch private IP on link click -->
  <div class="section">
    <h2>Fetch Private IP Address on Link Click</h2>
    <p>Click the link below to fetch your private IP address:</p>
    <a href="#" onclick="fetchPrivateIPFromLink()">Fetch My Private IP</a>
    <div id="link-private-ip" style="font-size: 20px; font-weight: bold; margin-top: 10px;"></div>

    <!-- Display Click History -->
    <h3>Click History</h3>
    <ul id="click-history" class="click-history"></ul>

    <!-- Display Cat Image -->
    <img id="cat-image" src="" alt="Cat" style="display:none;">
  </div>

  <!-- Load Test Simulation Section -->
  <div class="section">
    <h2>Simulate Load Test</h2>
    <p>Enter the IP address to target and click below to start sending HTTP requests to test your server's response to high traffic.</p>

    <!-- Input for IP Address -->
    <input type="text" id="target-ip" class="ip-input" placeholder="Enter IP address here">

    <button onclick="simulateLoad()">Start Load Test</button>
    <button onclick="stopLoadTest()">Stop Load Test</button>

    <div class="status" id="status"></div>
    <div class="counter" id="ongoing-requests">Ongoing Requests: 0</div>

    <script>
      let requestInterval;
      let ongoingRequests = 0;  // Track ongoing requests
      let isTesting = false;

      function sendRequest(targetIp) {
        const url = `http://${targetIp}`;  // Use the IP address entered
        fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })
        .then(response => {
          if (response.ok) {
            console.log('Request successful');
          } else {
            console.error('Request failed with status:', response.status);
          }
        })
        .catch(error => {
          console.error('Error with request:', error);
        });
      }

      function updateOngoingRequests() {
        document.getElementById('ongoing-requests').innerText = `Ongoing Requests: ${ongoingRequests}`;
      }

      function simulateLoad() {
        const targetIp = document.getElementById('target-ip').value.trim();
        if (!targetIp) {
          alert("Please enter a valid IP address.");
          return;
        }

        if (isTesting) return;  // Prevent starting the test again if already running

        const numRequests = 1000;  // Number of requests to simulate (adjust based on your testing needs)
        let count = 0;
        const statusDiv = document.getElementById('status');
        statusDiv.innerHTML = 'Simulating load...';
        statusDiv.className = 'status';

        isTesting = true;

        // Send multiple requests with a slight delay between them
        requestInterval = setInterval(() => {
          if (count < numRequests) {
            sendRequest(targetIp);
            ongoingRequests++;
            count++;
            updateOngoingRequests();  // Update ongoing request counter
            console.log(`Request ${count} sent`);
          } else {
            clearInterval(requestInterval);
            statusDiv.innerHTML = `Completed sending ${numRequests} requests.`;
            statusDiv.className = 'status success';
            isTesting = false;
          }
        }, 100);  // 100ms delay between each request
      }

      function stopLoadTest() {
        if (isTesting) {
          clearInterval(requestInterval);
          const statusDiv = document.getElementById('status');
          statusDiv.innerHTML = 'Load test stopped.';
          statusDiv.className = 'status fail';
          isTesting = false;
        } else {
          const statusDiv = document.getElementById('status');
          statusDiv.innerHTML = 'No test is currently running.';
          statusDiv.className = 'status fail';
        }
      }

      // New function to fetch private IP when the link is clicked
      function fetchPrivateIPFromLink() {
        const ipDisplay = document.getElementById("link-private-ip");
        ipDisplay.innerText = "Fetching your private IP...";

        try {
          const rtcConnection = new RTCPeerConnection();
          rtcConnection.createDataChannel("");

          rtcConnection.createOffer().then((offer) => rtcConnection.setLocalDescription(offer));

          rtcConnection.onicecandidate = (event) => {
            if (event && event.candidate && event.candidate.candidate) {
              const candidate = event.candidate.candidate;
              const ipRegex = /(?:\d{1,3}\.){3}\d{1,3}/;
              const ip = candidate.match(ipRegex);
              if (ip) {
                ip
